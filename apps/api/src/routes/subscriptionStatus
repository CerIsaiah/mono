import express, { Request, Response } from 'express';
import { createClient, SupabaseClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const router = express.Router();

// Initialize Supabase client
const supabase: SupabaseClient = createClient(
  process.env.SUPABASE_URL || '',
  process.env.SUPABASE_SERVICE_ROLE_KEY || '',
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
);

// Define interfaces for type safety
interface User {
  subscription_type: string | null;
  subscription_status: string | null;
  is_trial: boolean;
  trial_end_date: string | null;
  subscription_end_date: string | null;
  email: string;
  cancel_at_period_end: boolean;
  trial_started_at: string | null;
}

interface SubscriptionDetails {
  type: string | null;
  isTrialActive: boolean;
  trialEndsAt: string | null;
  subscriptionEndsAt: string | null;
  isCanceled: boolean;
  hadTrial: boolean;
  canceledDuringTrial: boolean;
}

interface SubscriptionResponse {
  status: string;
  details: SubscriptionDetails;
}

// GET endpoint to fetch subscription status
router.get('/subscription-status', async (req: Request, res: Response) => {
  try {
    const userId = req.query.userId as string | undefined;
    const userEmail = req.query.userEmail as string | undefined;
    
    const normalizedEmail = userEmail?.toLowerCase().trim();

    if (!userId && !normalizedEmail) {
      return res.status(400).json({ error: 'User ID or email is required' });
    }

    // Query using either userId or email
    const query = supabase
      .from('users')
      .select(`
        subscription_type,
        subscription_status,
        is_trial,
        trial_end_date,
        subscription_end_date,
        email,
        cancel_at_period_end,
        trial_started_at
      `);

    if (userId) {
      query.eq('id', userId);
    } else {
      query.eq('email', normalizedEmail as string);
    }
    
    const { data: user, error } = await query.single();

    if (error) {
      console.error('Error fetching subscription:', error);
      return res.status(500).json({ error: 'Failed to fetch subscription status' });
    }

    // Determine the current subscription state
    let status = 'free';
    let details: SubscriptionDetails = {
      type: user?.subscription_type || null,
      isTrialActive: false,
      trialEndsAt: null,
      subscriptionEndsAt: null,
      isCanceled: user?.cancel_at_period_end || false,
      hadTrial: !!user?.trial_started_at,
      canceledDuringTrial: user?.is_trial && user?.cancel_at_period_end
    };

    if (user) {
      const now = new Date();
      const trialEndDate = user.trial_end_date ? new Date(user.trial_end_date) : null;
      const subscriptionEndDate = user.subscription_end_date ? new Date(user.subscription_end_date) : null;

      // Check if trial is active
      if (user.is_trial && trialEndDate && trialEndDate > now) {
        status = user.cancel_at_period_end ? 'trial-canceling' : 'trial';
        details.isTrialActive = true;
        details.trialEndsAt = trialEndDate.toISOString();
      }
      // Check if subscription is active
      else if (user.subscription_status === 'active') {
        status = 'premium';
        details.subscriptionEndsAt = subscriptionEndDate?.toISOString() || null;
      }
      // Check if subscription is canceling
      else if (user.subscription_status === 'canceling') {
        status = 'canceling';
        details.subscriptionEndsAt = subscriptionEndDate?.toISOString() || null;
      }
    }

    const response: SubscriptionResponse = {
      status,
      details
    };

    return res.json(response);

  } catch (error) {
    console.error('Error:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
});

export default router;

// Example of how to use this in your main Express app:
/*
import express from 'express';
import subscriptionRoutes from './routes/subscription';

const app = express();
const port = process.env.PORT || 3000;

app.use('/api', subscriptionRoutes);

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
*/